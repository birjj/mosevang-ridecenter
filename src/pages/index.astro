---
import Document from "@/layouts/Document.astro";
import IndexLayout from "@/layouts/IndexLayout";
import MapSection from "@/components/MapSection";

import {
  Content as IndexSection,
  frontmatter as indexFrontmatter,
} from "@/content/sections/index.md";
import {
  Content as FacilitySection,
  frontmatter as facilityFrontmatter,
} from "@/content/sections/facilities.md";
import {
  Content as RulesSection,
  frontmatter as rulesFrontmatter,
} from "@/content/sections/rules.md";
import {
  Content as PricesSection,
  frontmatter as pricesFrontmatter,
} from "@/content/sections/prices.md";
import {
  Content as AboutSection,
  frontmatter as aboutFrontmatter,
} from "@/content/sections/about.md";

import HeroImage from "@/assets/images/img_4661.jpeg";
import ImageGrid from "@/components/ImageGrid";
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";
const allImages = import.meta.glob<{ default: ImageMetadata }>(
  "/src/assets/images/*.{jpeg,jpg,png,gif}"
);
const imagesFromFrontmatter = async (frontmatter: Record<string, any>) => {
  if (!("images" in frontmatter) || !Array.isArray(frontmatter.images)) {
    throw new Error(
      "No 'images' array in given frontmatter, can't extract images"
    );
  }
  const images: Promise<{ default: ImageMetadata }>[] = [];
  for (const entry of frontmatter.images) {
    if (!("image" in entry)) {
      throw new Error(
        `No 'image' in entry ${entry} from frontmatter, can't extract image`
      );
    }
    const path: string =
      "/src/" + (entry.image as string).replace(/^\/src\//, "");
    if (!allImages[path]) {
      console.log(allImages);
      throw new Error(`Can't find image path '${path}' in list of images`);
    }
    images.push(allImages[path]());
  }
  return (await Promise.all(images)).map((entry) => entry.default);
};

const indexImages = await imagesFromFrontmatter(indexFrontmatter);
const facilityImages = await imagesFromFrontmatter(facilityFrontmatter);
---

<Document title="Mosevang Ridecenter - Velkommen">
  <IndexLayout>
    <h1 class="title">Mosevang Ridecenter</h1>
    <Image
      class="hero-image"
      src={HeroImage}
      alt=""
      widths={[256, 512, HeroImage.width]}
      sizes={`(max-width: 1000px) 928px, 928px`}
    />
    <nav>
      <a href="#velkommen">Velkommen</a>
      <a href="#faciliteter">Faciliteter</a>
      <a href="#regler">Regler</a>
      <a href="#priser">Priser</a>
      <a href="#om-os">Om os</a>
    </nav>

    <div id="velkommen"></div>
    <IndexSection />
    <ImageGrid client:idle>
      {
        indexImages.map((entry) => (
          <Image
            src={entry}
            widths={[256, 512, entry.width]}
            sizes={`(max-width: 1000px) 512px, 512px`}
            alt=""
            data-album="index"
          />
        ))
      }
    </ImageGrid>

    <h2 id="faciliteter">Faciliteter</h2>
    <FacilitySection />
    <ImageGrid client:idle>
      {
        facilityImages.map((entry) => (
          <Image
            src={entry}
            widths={[256, 512, entry.width]}
            sizes={`(max-width: 512px) 256px, (max-width: 1000px) 512px, 512px`}
            alt=""
            data-album="facility"
          />
        ))
      }
    </ImageGrid>

    <h2 id="regler">Regler</h2>
    <RulesSection />

    <h2 id="priser">Priser</h2>
    <PricesSection />

    <h2 id="om-os">Om os</h2>
    <MapSection location="Mosevang Ridecenter, Allestedvej 36, 5260 Odense">
      <AboutSection />
    </MapSection>
  </IndexLayout>
</Document>

<style>
  .title {
    font-size: 4.5rem;
    line-height: 1;
    text-wrap: balance;
    text-align: center;
    margin-block-end: 2rem;
  }
  @media (max-width: 960px) {
    .title {
      font-size: 3.5rem;
    }
  }
  @media (max-width: 760px) {
    .title {
      font-size: 3rem;
    }
  }

  .hero-image {
    max-width: 100%;
    max-height: 256px;
    object-fit: cover;
    margin-inline: 0;
    border-radius: 4px;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
    z-index: 1;
    position: relative;
  }
  @media (max-width: 760px) {
    .hero-image {
      max-height: 128px;
    }
  }

  nav {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: space-between;
    margin-block-end: 2rem;
    position: sticky;
    top: 0;
    background: rgb(255 255 255 / 75%);
    backdrop-filter: blur(12px);
    margin-inline: -1rem;
    padding-inline: calc(var(--gutter-width) + 1rem);
  }
  nav > a {
    color: inherit;
    text-transform: uppercase;
    font-weight: bold;
    font-size: 0.75rem;
    line-height: 1rem;
    text-decoration: none;
    padding: 1rem 2rem;
  }
  nav > a:not(.active) {
    color: #444;
  }
  nav > a:hover,
  nav > a:focus-visible {
    color: var(--c-accent);
  }

  /* offset all link targets, to account for fixed nav */
  :global([id]::before) {
    content: "";
    display: block;
    height: 75px;
    margin-top: -75px;
    visibility: hidden;
  }
</style>
